version: '3.8'

#volumes:
##  influxdbv2:
#  postgres_data:
#    external: true

services:

  app:
    build:
      dockerfile: cmd/monolith/Dockerfile
      context: ./
    restart: on-failure
    env_file:
      - .env
    depends_on:
      - db
    ports:
      - "${PORT}:${PORT}"
    networks:
      - big_net

  db:
    image: postgres:15.4-alpine
    restart: on-failure
    volumes:
      - ./volumes/postgres_data/pgmaster:/var/lib/postgresql/data
      - ./db/migrations/data:/data
    networks:
      - big_net
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -h db"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 20s
    ports:
      - "5432:${POSTGRES_PORT}"

# TODO
  db_slave1:
    image: postgres:15.4-alpine
    restart: on-failure
    volumes:
      - ./volumes/postgres_data/pgslave1:/var/lib/postgresql/data
      - ./db/migrations/data:/data
    networks:
      - big_net
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -h db"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 20s
    ports:
      - "5433:${POSTGRES_PORT}"

  db_slave2:
    image: postgres:15.4-alpine
    restart: on-failure
    volumes:
      - ./volumes/postgres_data/pgslave2:/var/lib/postgresql/data
      - ./db/migrations/data:/data
    networks:
      - big_net
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -h db"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 20s
    ports:
      - "5434:${POSTGRES_PORT}"

  prometheus:
    image: prom/prometheus:latest
    container_name: monitoring_prometheus
    restart: unless-stopped
    volumes:
      - ./data/prometheus/config:/etc/prometheus/
      - ./data/prometheus/data:/prometheus
    command:
      - '-config.file=/etc/prometheus/prometheus.yml'
      - '-storage.local.path=/prometheus'
      - '-alertmanager.url=http://alertmanager:9093'
    expose:
      - 9090
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      - node-exporter:node-exporter

  node-exporter:
    image: prom/node-exporter:latest
    container_name: monitoring_node_exporter
    restart: unless-stopped
    expose:
      - 9100

  cadvisor:
    image: google/cadvisor:latest
    container_name: monitoring_cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    expose:
      - 8080

  grafana:
    image: grafana/grafana:latest
    container_name: monitoring_grafana
    restart: unless-stopped
    links:
      - prometheus:prometheus
    volumes:
      - ./data/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=MYPASSWORT
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=myrul.com
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.gmail.com:587
      - GF_SMTP_USER=myadrress@gmail.com
      - GF_SMTP_PASSWORD=mypassword
      - GF_SMTP_FROM_ADDRESS=myaddress@gmail.com

#  grafana:
#    image: grafana/grafana-enterprise
#    container_name: grafana
#    restart: unless-stopped
#    ports:
#      - '3000:3000'
#
#  influxdb:
#    image: influxdb:2.6-alpine
#    env_file:
#      - influxv2.env
#    volumes:
#      # Mount for influxdb data directory and configuration
#      - influxdbv2:/var/lib/influxdb2:rw
#    ports:
#      - "8086:8086"
#
#  telegraf:
#    image: telegraf:1.25-alpine
#    depends_on:
#      - influxdb
#    volumes:
#      # Mount for telegraf config
#      - ./telegraf/mytelegraf.conf:/etc/telegraf/telegraf.conf:ro
#    env_file:
#      - influxv2.env

networks:
  big_net:
    driver: bridge