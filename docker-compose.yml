version: '3.8'

volumes:
#  influxdbv2:
  postgres_data:
    external: true

services:

  app:
    build:
      dockerfile: cmd/monolith/Dockerfile
      context: ./
    restart: on-failure
    env_file:
      - .env
    depends_on:
      - db
    ports:
      - "${PORT}:${PORT}"
    networks:
      - big_net

  db:
    image: postgres:15.4-alpine
    restart: on-failure
    volumes:
      - ./postgres_data:/var/lib/postgres/data
      - ./db/migrations/data:/data
    networks:
      - big_net
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -h db"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 20s
    ports:
      - "5432:${POSTGRES_PORT}"

  db_migration:
    image: gomicro/goose
    volumes:
      - ./db/migrations:/migrations
    env_file:
      - .env
    environment:
      - GOOSE_DRIVER=postgres
      - GOOSE_DBSTRING=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}
    command: >
      goose -dir=. up
    links:
      - db
    depends_on:
      db:
        condition: service_healthy
    networks:
      - big_net

#  grafana:
#    image: grafana/grafana-enterprise
#    container_name: grafana
#    restart: unless-stopped
#    ports:
#      - '3000:3000'
#
#  influxdb:
#    image: influxdb:2.6-alpine
#    env_file:
#      - influxv2.env
#    volumes:
#      # Mount for influxdb data directory and configuration
#      - influxdbv2:/var/lib/influxdb2:rw
#    ports:
#      - "8086:8086"
#
#  telegraf:
#    image: telegraf:1.25-alpine
#    depends_on:
#      - influxdb
#    volumes:
#      # Mount for telegraf config
#      - ./telegraf/mytelegraf.conf:/etc/telegraf/telegraf.conf:ro
#    env_file:
#      - influxv2.env

networks:
  big_net:
    driver: bridge