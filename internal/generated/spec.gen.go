// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"edvb/wsAAP//7v37FqouAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
